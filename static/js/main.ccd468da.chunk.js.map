{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/app.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onKeyPress","key","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","controls","type","src","previewUrl","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","save","onNameChange","onSave","defaultValue","playlistTracks","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","preview_url","savePlaylist","listName","trackUris","length","userID","method","body","JSON","stringify","playlistID","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","trackURIs","alert","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ccd468da.chunk.js","sourcesContent":["const clientId = 'fa7577844db844e7980083c35b405dd9';\nconst redirectUri = 'https://manovak24.github.io/Jammming';\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        } \n        // check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            //This clears the parameters, allowing us to grab a new access token when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n        { headers: {\n            Authorization: `Bearer ${accessToken}`\n        }}).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri,\n                previewUrl: track.preview_url\n            }));\n        });\n\n    },\n\n    savePlaylist(listName, trackUris) {\n        if ( !listName || !trackUris.length ) {\n           return;\n          }\n   \n          const accessToken = Spotify.getAccessToken();\n          const headers = { Authorization: `Bearer ${accessToken}`}\n          let userID;\n   \n          return fetch('https://api.spotify.com/v1/me', {headers: headers}\n          ).then(response => response.json()\n          ).then(jsonResponse => {\n            userID = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,{\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({ name: listName })\n            }).then(response =>  response.json()\n            ).then(jsonResponse => {\n              const playlistID = jsonResponse.id;\n               return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,{\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({ uris: trackUris })\n            });\n          });\n        });\n      } // end of savePlaylist method\n\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tterm: ''\n\t\t}\n\n\t\tthis.search = this.search.bind(this);\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\n\t}\n\n\tsearch() {\n\t\tthis.props.onSearch(this.state.term);\n\t}\n\n\thandleTermChange(event) {\n\t\tthis.setState({ term: event.target.value });\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"SearchBar\">\n\t\t\t\t  <input\n\t\t\t\t  onKeyPress={event => {\n\t\t\t\t\t  if (event.key === \"Enter\") {\n\t\t\t\t\t\t  this.search();\n\t\t\t\t\t  }\n\t\t\t\t  }}\n\t\t\t\t  onChange={this.handleTermChange} \n\t\t\t\t  placeholder=\"Enter A Song, Album, or Artist\" />\n  \t\t\t\t<button onClick={this.search} className=\"SearchButton\">SEARCH</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.addTrack = this.addTrack.bind(this);\n\t\tthis.removeTrack = this.removeTrack.bind(this);\n\t}\n \n\trenderAction() {\n\t\tif (this.props.isRemoval) {\n\t\t\treturn <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n\t\t} else {\n\t\t\treturn <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n\t\t}\n\t}\n\n\taddTrack() {\n\t\tthis.props.onAdd(this.props.track);\n\t}\n\n\tremoveTrack() {\n\t\tthis.props.onRemove(this.props.track);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Track\">\n\t\t\t\t<div className=\"Track-information\">\n\t\t\t\t\t<h3>{this.props.track.name}</h3>\n\t\t\t\t\t<p>{this.props.track.artist} | {this.props.track.album}</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"audio-container\">\n\t\t\t\t\t\t<audio className=\"audio\" controls=\"controls\">\n\t\t\t\t\t\t\t<source type=\"audio/mpeg\" src={this.props.track.previewUrl} />\n\t\t\t\t\t\t</audio>\n\t\t\t\t</div>\n\t\t\t\t{this.renderAction()}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"TrackList\">\n\t\t\t\t{\n\t\t\t\t\tthis.props.tracks.map(track => {\n\t\t\t\t\t\treturn <Track track={track} \n\t\t\t\t\t\t\tkey={track.id}\n\t\t\t\t\t\t\tonAdd={this.props.onAdd}\n\t\t\t\t\t\t\tonRemove={this.props.onRemove}\n\t\t\t\t\t\t\tisRemoval={this.props.isRemoval} />\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t\n\t\t)\n\t}\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"SearchResults\">\n  \t\t\t<h2>Results</h2>\n\t\t\t  <TrackList tracks={this.props.searchResults}\n\t\t\t\t  onAdd={this.props.onAdd}\n\t\t\t\t  isRemoval={false} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\n\t\tthis.save = this.save.bind(this);\n\t}\n\n\thandleNameChange(event) {\n\t\tthis.props.onNameChange(event.target.value);\n\t}\n\t\n\tsave() {\n\t\tthis.props.onSave();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Playlist\">\n\t\t\t\t<input \n\t\t\t\tdefaultValue={'New Playlist'} \n\t\t\t\tonChange={this.handleNameChange}\n\t\t\t\tonKeyPress={event => {\n\t\t\t\t\tif (event.key === \"Enter\") {\n\t\t\t\t\t\tthis.save();\n\t\t\t\t\t}\n\t\t\t\t}} />\n\t\t\t\t<TrackList tracks={this.props.playlistTracks}\n\t\t\t\t\tonRemove={this.props.onRemove}\n\t\t\t\t\tisRemoval={true} />\n\t\t\t\t<button className=\"Playlist-save\" onClick={this.save}>SAVE TO SPOTIFY</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Playlist;","import React from 'react';\nimport './app.css';\nimport SearchBar from '../../Components/SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'The Mix Tape',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id)\n    this.setState({ playlistTracks: tracks });\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track=>track.uri);\n    if (trackURIs && trackURIs.length) {\n      Spotify.savePlaylist(this.state.playlistName, trackURIs).then(()=>{\n        this.setState({\n          playlistName: 'New Playlist',\n          playlistTracks: []\n        })\n      });\n    } else {\n      alert(\"Playlist Empty\");\n    }  \n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={this.search} />\n        <div className=\"App-playlist\">\n          <SearchResults searchResults={this.state.searchResults}\n            onAdd={this.addTrack} />\n          <Playlist playlistName={this.state.playlistName}\n            playlistTracks={this.state.playlistTracks}\n            onRemove={this.removeTrack}\n            onNameChange={this.updatePlaylistName}\n            onSave={this.savePlaylist} />\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}